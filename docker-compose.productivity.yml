# =============================================================================
# PRODUCTIVITY SERVICES - DOCKER COMPOSE CONFIGURATION
# =============================================================================
# This file contains productivity-focused services:
# - NocoDB: Airtable alternative for database management
# - Paperless-ngx: Document management system
#
# Usage:
#   docker compose --profile productivity up -d
#
# Data Storage:
#   Persistent state lives under ./volumes/ and user-facing files under ./files/ (both configurable via .env)
# =============================================================================

networks:
  productivity-network:
    name: productivity-network
    driver: bridge
    external: false

services:
  # =============================================================================
  # NOCODB - AIRTABLE ALTERNATIVE
  # =============================================================================
  
  nocodb-db:
    image: postgres:15-alpine
    container_name: nocodb-db
    environment:
      POSTGRES_DB: ${NOCODB_DBNAME:-nocodb}
      POSTGRES_USER: ${NOCODB_DBUSER:-nocodb}
      POSTGRES_PASSWORD: ${NOCODB_DBPASS:-nocodb_password_2024}
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${NOCODB_DBUSER:-nocodb} -d ${NOCODB_DBNAME:-nocodb}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - type: volume
        source: nocodb-db-data
        target: /var/lib/postgresql/data
    networks:
      - productivity-network
      - shared-network
    restart: unless-stopped

  nocodb:
    image: nocodb/nocodb:latest
    container_name: nocodb
    depends_on:
      nocodb-db:
        condition: service_healthy
    environment:
      # Database Configuration
      NC_DB: "pg://nocodb-db:5432?u=${NOCODB_DBUSER:-nocodb}&p=${NOCODB_DBPASS:-nocodb_password_2024}&d=${NOCODB_DBNAME:-nocodb}"
      
      # Security Configuration
      NC_JWT_EXPIRES_IN: "10h"
      NC_JWT_SECRET: ${NOCODB_JWT_SECRET}
      NC_AUTH_JWT_SECRET: ${NOCODB_AUTH_JWT_SECRET}
      
      # Application Configuration
      NC_PUBLIC_URL: ${NOCODB_PROTOCOL}://${NOCODB_DOMAIN}
      NC_DISABLE_TELE: true
      NC_REDIS_URL: ""
      
      # Admin Configuration
      NC_ADMIN_EMAIL: admin@example.com
      NC_ADMIN_PASSWORD: ${NOCODB_ADMIN_PASSWORD:-secure_nocodb_password_2024}
      
    volumes:
      - type: bind
        source: ${FILES_BASE_DIR:-./files}/nocodb
        target: /usr/app/data
    networks:
      - productivity-network
      - shared-network
    ports:
      - "${NOCODB_PORT}:8080"
    restart: unless-stopped
    profiles:
      - all
      - productivity
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/v1/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: ${NOCODB_MEMORY_LIMIT}
    labels:
      # Traefik Configuration for external access
      - traefik.enable=true
      - traefik.http.routers.nocodb.rule=Host(`${NOCODB_DOMAIN:-nocodb-${COMPUTER_NAME}.${BASE_DOMAIN}}`)
      - traefik.http.routers.nocodb.entrypoints=web,websecure
      - traefik.http.routers.nocodb.tls=true
      - traefik.http.services.nocodb.loadbalancer.server.port=8080
      - traefik.docker.network=shared-network
      
      # Additional labels for documentation
      - "com.docker.compose.service=nocodb"
      - "com.docker.compose.project=${COMPOSE_PROJECT_NAME:-coder}"
      - "description=NocoDB - Airtable Alternative Database Management"

  # =============================================================================
  # N8N - WORKFLOW AUTOMATION
  # =============================================================================

  n8n-db:
    image: postgres:15-alpine
    container_name: n8n-db
    environment:
      POSTGRES_DB: ${N8N_DBNAME:-n8n}
      POSTGRES_USER: ${N8N_DBUSER:-n8n}
      POSTGRES_PASSWORD: ${N8N_DBPASS:-n8n_password_2024}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - type: volume
        source: n8n-db-data
        target: /var/lib/postgresql/data
    networks:
      - productivity-network
      - shared-network
    restart: unless-stopped
    profiles:
      - all
      - productivity
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${N8N_DBUSER:-n8n} -d ${N8N_DBNAME:-n8n}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512m

  n8n:
    image: docker.n8n.io/n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    user: "1000:1000"
    depends_on:
      n8n-db:
        condition: service_healthy
    ports:
      - "${N8N_PORT:-5678}:5678"
    environment:
      # Database Configuration
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: n8n-db
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${N8N_DBNAME:-n8n}
      DB_POSTGRESDB_USER: ${N8N_DBUSER:-n8n}
      DB_POSTGRESDB_PASSWORD: ${N8N_DBPASS:-n8n_password_2024}
      DB_POSTGRESDB_SCHEMA: public
      
      # Application Configuration
      N8N_HOST: 0.0.0.0
      N8N_PORT: 5678
      N8N_PROTOCOL: ${N8N_PROTOCOL:-http}
      WEBHOOK_URL: ${N8N_PROTOCOL:-http}://localhost:5678/
      GENERIC_TIMEZONE: ${TIMEZONE:-America/New_York}
      TZ: ${TIMEZONE:-America/New_York}
      
      # Security Configuration
      N8N_BASIC_AUTH_ACTIVE: false
      N8N_DISABLE_UI: false
    volumes:
      - type: bind
        source: ${FILES_BASE_DIR:-./files}/n8n
        target: /home/node/.n8n
    networks:
      - productivity-network
      - shared-network
    deploy:
      resources:
        limits:
          memory: ${N8N_MEMORY_LIMIT:-2g}
    profiles:
      - all
      - productivity
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.rule=Host(`${N8N_DOMAIN:-n8n-${COMPUTER_NAME}.${BASE_DOMAIN}}`)
      - traefik.http.routers.n8n.entrypoints=web,websecure
      - traefik.http.routers.n8n.tls=true
      - traefik.http.services.n8n.loadbalancer.server.port=5678
      - traefik.docker.network=shared-network
      
      # Additional labels for documentation
      - "com.docker.compose.service=n8n"
      - "com.docker.compose.project=${COMPOSE_PROJECT_NAME:-coder}"
      - "description=N8N - Workflow Automation Platform"

  # =============================================================================
  # PAPERLESS-NGX - DOCUMENT MANAGEMENT SYSTEM
  # =============================================================================
  
  paperless-db:
    image: postgres:15-alpine
    container_name: paperless-db
    environment:
      POSTGRES_DB: ${PAPERLESS_DBNAME:-paperless}
      POSTGRES_USER: ${PAPERLESS_DBUSER:-paperless}
      POSTGRES_PASSWORD: ${PAPERLESS_DBPASS:-paperless_password_2024}
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PAPERLESS_DBUSER:-paperless} -d ${PAPERLESS_DBNAME:-paperless}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - type: volume
        source: paperless-db-data
        target: /var/lib/postgresql/data
    networks:
      - productivity-network
      - shared-network
    restart: unless-stopped

  paperless-redis:
    image: redis:7-alpine
    container_name: paperless-redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - type: volume
        source: paperless-redis-data
        target: /data
    networks:
      - productivity-network
      - shared-network
    restart: unless-stopped

  paperless-ngx:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    container_name: paperless-ngx
    depends_on:
      paperless-db:
        condition: service_healthy
      paperless-redis:
        condition: service_healthy
    environment:
      # Database Configuration
      PAPERLESS_DBHOST: paperless-db
      PAPERLESS_DBPORT: 5432
      PAPERLESS_DBNAME: ${PAPERLESS_DBNAME:-paperless}
      PAPERLESS_DBUSER: ${PAPERLESS_DBUSER:-paperless}
      PAPERLESS_DBPASS: ${PAPERLESS_DBPASS:-paperless_password_2024}
      
      # Redis Configuration
      PAPERLESS_REDIS: redis://paperless-redis:6379
      
      # Application Configuration
      PAPERLESS_URL: ${PAPERLESS_PROTOCOL:-http}://${PAPERLESS_DOMAIN:-docs-${COMPUTER_NAME}.${BASE_DOMAIN}}
      PAPERLESS_SECRET_KEY: ${PAPERLESS_SECRET_KEY:-paperless-secret-key-change-me-2024}
      PAPERLESS_TIME_ZONE: ${TIMEZONE:-UTC}
      PAPERLESS_OCR_LANGUAGE: eng
      
      # Admin User Configuration
      PAPERLESS_ADMIN_USER: ${PAPERLESS_ADMIN_USER:-admin}
      PAPERLESS_ADMIN_PASSWORD: ${PAPERLESS_ADMIN_PASSWORD:-secure_paperless_password_2024}
      PAPERLESS_ADMIN_MAIL: admin@localhost
      
      # Document Processing
      PAPERLESS_CONSUMER_POLLING: 10
      PAPERLESS_CONSUMER_DELETE_DUPLICATES: true
      PAPERLESS_CONSUMER_RECURSIVE: true
      PAPERLESS_CONSUMER_SUBDIRS_AS_TAGS: true
      
      # Security
      PAPERLESS_ALLOWED_HOSTS: ${PAPERLESS_DOMAIN:-docs-${COMPUTER_NAME}.${BASE_DOMAIN}},localhost,127.0.0.1
      PAPERLESS_CORS_ALLOWED_HOSTS: ${PAPERLESS_PROTOCOL:-http}://${PAPERLESS_DOMAIN:-docs-${COMPUTER_NAME}.${BASE_DOMAIN}}
      
    volumes:
      - type: volume
        source: paperless-data
        target: /usr/src/paperless/data
      - type: bind
        source: ${FILES_BASE_DIR:-./files}/paperless/media
        target: /usr/src/paperless/media
      - type: bind
        source: ${FILES_BASE_DIR:-./files}/paperless/consume
        target: /usr/src/paperless/consume
      - type: bind
        source: ${FILES_BASE_DIR:-./files}/paperless/export
        target: /usr/src/paperless/export
    networks:
      - productivity-network
      - shared-network
    ports:
      - "${PAPERLESS_PORT:-8082}:8000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: ${PAPERLESS_MEMORY_LIMIT:-2g}
    profiles:
      - all
      - productivity
    labels:
      # Traefik Configuration for external access
      - traefik.enable=true
      - traefik.http.routers.paperless.rule=Host(`${PAPERLESS_DOMAIN:-docs-${COMPUTER_NAME}.${BASE_DOMAIN}}`)
      - traefik.http.routers.paperless.entrypoints=web,websecure
      - traefik.http.routers.paperless.tls=true
      - traefik.http.services.paperless.loadbalancer.server.port=8000
      - traefik.docker.network=shared-network
      
      # Additional labels for documentation
      - "com.docker.compose.service=paperless-ngx"
      - "com.docker.compose.project=${COMPOSE_PROJECT_NAME:-coder}"
      - "description=Paperless-ngx - Document Management and OCR System"

  # =============================================================================
  # ACTIVEPIECES - WORKFLOW AUTOMATION
  # =============================================================================

  activepieces-db:
    image: postgres:15-alpine
    container_name: activepieces-db
    environment:
      POSTGRES_DB: ${ACTIVEPIECES_DBNAME:-activepieces}
      POSTGRES_USER: ${ACTIVEPIECES_DBUSER:-activepieces}
      POSTGRES_PASSWORD: ${ACTIVEPIECES_DBPASS:-activepieces_password_2024}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - type: volume
        source: activepieces-db-data
        target: /var/lib/postgresql/data
    networks:
      - productivity-network
      - shared-network
    restart: unless-stopped
    profiles:
      - all
      - productivity
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${ACTIVEPIECES_DBUSER:-activepieces} -d ${ACTIVEPIECES_DBNAME:-activepieces}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512m

  activepieces-redis:
    image: redis:7-alpine
    container_name: activepieces-redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - type: volume
        source: activepieces-redis-data
        target: /data
    networks:
      - productivity-network
      - shared-network
    restart: unless-stopped
    profiles:
      - all
      - productivity

  activepieces:
    image: activepieces/activepieces:latest
    container_name: activepieces
    restart: unless-stopped
    depends_on:
      activepieces-db:
        condition: service_healthy
      activepieces-redis:
        condition: service_healthy
    ports:
      - "${ACTIVEPIECES_PORT:-8087}:80"
    environment:
      # Database Configuration
      AP_POSTGRES_HOST: activepieces-db
      AP_POSTGRES_PORT: 5432
      AP_POSTGRES_DATABASE: ${ACTIVEPIECES_DBNAME:-activepieces}
      AP_POSTGRES_USERNAME: ${ACTIVEPIECES_DBUSER:-activepieces}
      AP_POSTGRES_PASSWORD: ${ACTIVEPIECES_DBPASS:-activepieces_password_2024}
      
      # Redis Configuration
      AP_REDIS_HOST: activepieces-redis
      AP_REDIS_PORT: 6379
      
      # Application Configuration
      AP_FRONTEND_URL: ${ACTIVEPIECES_PROTOCOL:-http}://${ACTIVEPIECES_DOMAIN:-activepieces-${COMPUTER_NAME}.${BASE_DOMAIN}}
      AP_WEBHOOK_URL: ${ACTIVEPIECES_PROTOCOL:-http}://${ACTIVEPIECES_DOMAIN:-activepieces-${COMPUTER_NAME}.${BASE_DOMAIN}}
      AP_ENCRYPTION_KEY: ${ACTIVEPIECES_ENCRYPTION_KEY:-activepieces-encryption-key-change-me-2024}
      AP_JWT_SECRET: ${ACTIVEPIECES_JWT_SECRET:-activepieces-jwt-secret-change-me-2024}
      
      # Environment
      AP_ENVIRONMENT: prod
      AP_EXECUTION_MODE: UNSANDBOXED
      
      # Telemetry
      AP_TELEMETRY_ENABLED: false
      
      # Timezone
      TZ: ${TIMEZONE:-UTC}
      
    volumes:
      - type: volume
        source: activepieces-data
        target: /root/.activepieces
    networks:
      - productivity-network
      - shared-network
    deploy:
      resources:
        limits:
          memory: ${ACTIVEPIECES_MEMORY_LIMIT:-2g}
    profiles:
      - all
      - productivity
    labels:
      # Traefik Configuration for external access
      - traefik.enable=true
      - traefik.http.routers.activepieces.rule=Host(`${ACTIVEPIECES_DOMAIN:-activepieces-${COMPUTER_NAME}.${BASE_DOMAIN}}`)
      - traefik.http.routers.activepieces.entrypoints=web,websecure
      - traefik.http.routers.activepieces.tls=true
      - traefik.http.services.activepieces.loadbalancer.server.port=80
      - traefik.docker.network=shared-network
      
      # Additional labels for documentation
      - "com.docker.compose.service=activepieces"
      - "com.docker.compose.project=${COMPOSE_PROJECT_NAME:-coder}"
      - "description=Activepieces - Open Source Workflow Automation"

  # =============================================================================
  # POSTIZ - SELF-HOSTED SOCIAL MEDIA MANAGEMENT
  # =============================================================================

  postiz-db:
    image: postgres:15-alpine
    container_name: postiz-db
    environment:
      POSTGRES_DB: ${POSTIZ_DBNAME:-postiz}
      POSTGRES_USER: ${POSTIZ_DBUSER:-postiz}
      POSTGRES_PASSWORD: ${POSTIZ_DBPASS:-postiz_password_2024}
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTIZ_DBUSER:-postiz} -d ${POSTIZ_DBNAME:-postiz}"]
      interval: 15s
      timeout: 5s
      retries: 5
    volumes:
      - type: volume
        source: postiz-db-data
        target: /var/lib/postgresql/data
    networks:
      - productivity-network
      - shared-network
    restart: unless-stopped
    profiles:
      - all
      - productivity

  postiz-redis:
    image: redis:7-alpine
    container_name: postiz-redis
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 5
    volumes:
      - type: volume
        source: postiz-redis-data
        target: /data
    networks:
      - productivity-network
      - shared-network
    restart: unless-stopped
    profiles:
      - all
      - productivity

  postiz:
    image: ghcr.io/gitroomhq/postiz-app:latest
    container_name: postiz
    depends_on:
      postiz-db:
        condition: service_healthy
      postiz-redis:
        condition: service_healthy
    environment:
      # Database Configuration
      DATABASE_URL: postgres://${POSTIZ_DBUSER:-postiz}:${POSTIZ_DBPASS:-postiz_password_2024}@postiz-db:5432/${POSTIZ_DBNAME:-postiz}
      
      # Redis Configuration
      REDIS_URL: redis://postiz-redis:6379
      
      # Application Configuration
      MAIN_URL: ${POSTIZ_PROTOCOL:-https}://${POSTIZ_DOMAIN:-postiz-${COMPUTER_NAME}.${BASE_DOMAIN}}
      FRONTEND_URL: ${POSTIZ_PROTOCOL:-https}://${POSTIZ_DOMAIN:-postiz-${COMPUTER_NAME}.${BASE_DOMAIN}}
      NEXT_PUBLIC_BACKEND_URL: ${POSTIZ_PROTOCOL:-https}://${POSTIZ_DOMAIN:-postiz-${COMPUTER_NAME}.${BASE_DOMAIN}}/api
      BACKEND_INTERNAL_URL: http://localhost:3000
      NEXTAUTH_URL: ${POSTIZ_PROTOCOL:-https}://${POSTIZ_DOMAIN:-postiz-${COMPUTER_NAME}.${BASE_DOMAIN}}
      NEXTAUTH_SECRET: ${POSTIZ_NEXTAUTH_SECRET:-postiz-nextauth-secret-change-me-2024}
      JWT_SECRET: ${POSTIZ_JWT_SECRET:-postiz-jwt-secret-change-me-2024}
      BASE_URL: ${POSTIZ_PROTOCOL:-https}://${POSTIZ_DOMAIN:-postiz-${COMPUTER_NAME}.${BASE_DOMAIN}}
      
      # Storage Configuration
      STORAGE_PROVIDER: local
      UPLOAD_DIRECTORY: /app/public/uploads
      
      # Admin Configuration
      ADMIN_EMAIL: ${POSTIZ_ADMIN_EMAIL:-admin@example.com}
      ADMIN_PASSWORD: ${POSTIZ_ADMIN_PASSWORD:-secure_postiz_password_2024}
      
      # Environment
      NODE_ENV: production
      TZ: ${TIMEZONE:-UTC}
      
    ports:
      - "${POSTIZ_PORT:-8095}:5000"
    volumes:
      - type: bind
        source: ${FILES_BASE_DIR:-./files}/postiz/uploads
        target: /app/public/uploads
    networks:
      - productivity-network
      - shared-network
    restart: unless-stopped
    profiles:
      - all
      - productivity
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:5000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: ${POSTIZ_MEMORY_LIMIT:-2g}
    labels:
      # Traefik Configuration for external access
      - traefik.enable=true
      - traefik.http.routers.postiz.rule=Host(`${POSTIZ_DOMAIN:-postiz-${COMPUTER_NAME}.${BASE_DOMAIN}}`)
      - traefik.http.routers.postiz.entrypoints=web,websecure
      - traefik.http.routers.postiz.tls=true
      - traefik.http.services.postiz.loadbalancer.server.port=5000
      - traefik.docker.network=shared-network
      
      # Additional labels for documentation
      - "com.docker.compose.service=postiz"
      - "com.docker.compose.project=${COMPOSE_PROJECT_NAME:-coder}"
      - "description=Postiz - Self-hosted Social Media Scheduler"

volumes:
  nocodb-db-data:
  n8n-db-data:
  paperless-db-data:
  paperless-redis-data:
  activepieces-db-data:
  activepieces-redis-data:
  activepieces-data:
  paperless-data:
  postiz-db-data:
  postiz-redis-data:

