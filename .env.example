# =============================================================================
# CODER DEVELOPMENT PLATFORM CONFIGURATION TEMPLATE
# =============================================================================
# Copy this file to .env and customize as needed
# This is the template file - customize passwords and settings in your .env

COMPUTER_NAME=dev-workstation
COMPUTER_TYPE=workstation

# Default profile selection - this enables ALL services
COMPOSE_PROFILES=all

# =============================================================================
# CORE CODER CONFIGURATION (REQUIRED)
# =============================================================================

# Coder Access Configuration
# Use container name since workspace containers are on coder-network
CODER_ACCESS_URL=http://coder:7080
CODER_HTTP_ADDRESS=0.0.0.0:7080
CODER_HTTP_PORT=7080

# =============================================================================
# DATABASE CONFIGURATION (REQUIRED)
# =============================================================================

# PostgreSQL Database Settings
POSTGRES_USER=coder_admin
POSTGRES_PASSWORD=secure_password_2024
POSTGRES_DB=coder

# =============================================================================
# SYSTEM CONFIGURATION
# =============================================================================

# Domain & Storage
BASE_DOMAIN=localhost
FILES_BASE_DIR=./files
# Absolute path required by Terraform Docker provider for bind mounts
WORKSPACE_DIR=/mnt/workspace/wcp-coder/files/coder/workspace

# SSH_KEY_DIR: MUST be an absolute path to your SSH directory
# Examples:
#   Linux:   /home/username/.ssh
#   macOS:   /Users/username/.ssh
#   Windows WSL: /home/username/.ssh
SSH_KEY_DIR=/home/docker/.ssh

CONFIG_BASE_DIR=./config
# Filesystem Paths - User-facing data goes to ./files for backup
CODER_TEMPLATE_DIR=${FILES_BASE_DIR}/coder/templates
GITEA_DATA_DIR=${FILES_BASE_DIR}/gitea/app
REGISTRY_DATA_DIR=${FILES_BASE_DIR}/registry/cache
# Proxy & Tunnel Config Paths
TRAEFIK_CONFIG_FILE=${CONFIG_BASE_DIR}/traefik/config.yml
TRAEFIK_AUTH_DIR=${CONFIG_BASE_DIR}/traefik/auth
CLOUDFLARE_CONFIG_FILE=${CONFIG_BASE_DIR}/cloudflare/config.yml
CLOUDFLARE_CREDENTIALS_DIR=${CONFIG_BASE_DIR}/cloudflare/.cloudflared
# NOTE on *DOMAIN variables used by Traefik (Host rules):
# - If you access services via Traefik/Cloudflare, use hostnames WITHOUT ports (e.g., app.example.com)
# - If you access via localhost port mapping, you may include :PORT in the domain variables where shown

# Resource Limits
POSTGRES_MEMORY_LIMIT=1g
CODER_MEMORY_LIMIT=2g

# Timezone
TIMEZONE=UTC

# =============================================================================
# AUTOMATION SERVICES CONFIGURATION (OPTIONAL - Profile: automation)
# =============================================================================
# Enable/disable automation services by setting profile to 'automation' or 'disabled'

# Workflow Automation (N8N)
AUTOMATION_N8N_PROFILE=automation
N8N_PORT=5678
N8N_MEMORY_LIMIT=2g
N8N_TRAEFIK_ENABLE=true
N8N_DOMAIN=n8n.${BASE_DOMAIN}
N8N_PROTOCOL=http
N8N_METRICS_ENABLE=true
N8N_DIAGNOSTICS_ENABLE=false
N8N_DBNAME=n8n
N8N_DBUSER=n8n
N8N_DBPASS=n8n_password_2024

# =============================================================================
# AI SERVICES CONFIGURATION (OPTIONAL - Profile: ai)
# =============================================================================
# PREREQUISITE: Install Ollama natively on your system first!
# Windows: Download from https://ollama.ai/ or install in WSL2
# macOS: brew install ollama  
# Linux: curl -fsSL https://ollama.ai/install.sh | sh

# AI Chat Interface (Open WebUI connects to native Ollama)
AI_CHAT_PROFILE=ai  # Profile name used by docker compose (start with: --profile ai)
OPENWEBUI_PORT=3000
OPENWEBUI_MEMORY_LIMIT=2g
OPENWEBUI_TRAEFIK_ENABLE=true
OPENWEBUI_DOMAIN=chat.${BASE_DOMAIN}
WEBUI_SECRET_KEY=secure-chat-key-2024

# Native Ollama Configuration (running on host system)
OLLAMA_HOST=http://host.docker.internal:11434  # Connect to native Ollama
# Note: Ollama runs natively on your system, not in Docker

# Privacy Search Engine (SearXNG)
AI_SEARCH_PROFILE=ai  # Profile name used by docker compose (start with: --profile ai)
SEARXNG_PORT=4000
SEARXNG_MEMORY_LIMIT=1g
SEARXNG_TRAEFIK_ENABLE=false
SEARXNG_DOMAIN=search.${BASE_DOMAIN}
SEARXNG_PROTOCOL=http
SEARXNG_SECRET_KEY=searxng-secret-key-change-me-2024
SEARXNG_SECRET=searxng-secret-key-change-me-2024
SEARXNG_AUTH_ENABLE=true
SEARXNG_AUTH_USER=searx
SEARXNG_AUTH_PASSWORD=change-me-searxng-password

# Image Generation (Stable Diffusion - Requires GPU)
AI_STABLEDIFFUSION_PROFILE=disabled
STABLE_DIFFUSION_PORT=7861
STABLE_DIFFUSION_MEMORY_LIMIT=6g
STABLE_DIFFUSION_TRAEFIK_ENABLE=true
STABLE_DIFFUSION_DOMAIN=sd-${COMPUTER_NAME}.${BASE_DOMAIN}
STABLE_DIFFUSION_SECRET=stable-diffusion-secret-2024
STABLE_DIFFUSION_ARGS=--listen --port 7860 --allow-code --medvram --xformers --enable-insecure-extension-access

# Global Traefik Configuration for AI Services
TRAEFIK_TLS_ENABLE=true
TRAEFIK_CERT_RESOLVER=letsencrypt

# =============================================================================
# PRODUCTIVITY SERVICES CONFIGURATION (OPTIONAL - Profile: productivity)
# =============================================================================
# Enable/disable productivity services by setting profile to 'productivity' or 'disabled'

# Database & Data Management (NocoDB - Airtable Alternative)
PRODUCTIVITY_DATABASE_PROFILE=productivity
NOCODB_PORT=8090
NOCODB_MEMORY_LIMIT=2g
NOCODB_TRAEFIK_ENABLE=false
NOCODB_DOMAIN=nocodb.${BASE_DOMAIN}  # Traefik/Cloudflare hostname
NOCODB_PROTOCOL=http
NOCODB_JWT_SECRET=nocodb-jwt-secret-change-me-2024
NOCODB_AUTH_JWT_SECRET=nocodb-auth-jwt-secret-change-me-2024
NOCODB_ADMIN_PASSWORD=secure_nocodb_password_2024
NOCODB_DBNAME=nocodb
NOCODB_DBUSER=nocodb
NOCODB_DBPASS=nocodb_password_2024

# Document Management (Paperless-ngx)
PRODUCTIVITY_DOCS_PROFILE=productivity
PAPERLESS_PORT=8082
PAPERLESS_MEMORY_LIMIT=2g
PAPERLESS_TRAEFIK_ENABLE=true
PAPERLESS_DOMAIN=paperless.${BASE_DOMAIN}  # Match Traefik/Cloudflare route
PAPERLESS_PROTOCOL=https
PAPERLESS_ADMIN_USER=admin
PAPERLESS_ADMIN_PASSWORD=secure_paperless_password_2024
PAPERLESS_SECRET_KEY=paperless-secret-key-change-me-2024
PAPERLESS_REDIS_HOST=paperless-redis
PAPERLESS_DBHOST=paperless-db
PAPERLESS_DBNAME=paperless
PAPERLESS_DBUSER=paperless
PAPERLESS_DBPASS=paperless_db_password_2024

# Workflow Automation (Activepieces)
# Note: ACTIVEPIECES_ENCRYPTION_KEY must be exactly 32 hex characters (16 bytes)
# Generate with: openssl rand -hex 16
# Generate JWT secret with: openssl rand -hex 32
PRODUCTIVITY_WORKFLOW_PROFILE=productivity
ACTIVEPIECES_PORT=8087
ACTIVEPIECES_MEMORY_LIMIT=2g
ACTIVEPIECES_TRAEFIK_ENABLE=true
ACTIVEPIECES_DOMAIN=activepieces.${BASE_DOMAIN}
ACTIVEPIECES_PROTOCOL=https
ACTIVEPIECES_ENCRYPTION_KEY=0123456789abcdef0123456789abcdef
ACTIVEPIECES_JWT_SECRET=0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
ACTIVEPIECES_DBNAME=activepieces
ACTIVEPIECES_DBUSER=activepieces
ACTIVEPIECES_DBPASS=activepieces_password_2024

# Social Media Management (Postiz)
PRODUCTIVITY_SOCIAL_PROFILE=productivity
POSTIZ_PORT=8095
POSTIZ_MEMORY_LIMIT=2g
POSTIZ_TRAEFIK_ENABLE=true
POSTIZ_DOMAIN=postiz.${BASE_DOMAIN}
POSTIZ_PROTOCOL=https
POSTIZ_NEXTAUTH_SECRET=postiz-nextauth-secret-change-me-2024
POSTIZ_JWT_SECRET=postiz-jwt-secret-change-me-2024
POSTIZ_ADMIN_EMAIL=admin@example.com
POSTIZ_ADMIN_PASSWORD=secure_postiz_password_2024
POSTIZ_DBNAME=postiz
POSTIZ_DBUSER=postiz
POSTIZ_DBPASS=postiz_password_2024

# =============================================================================
# DEVELOPMENT SERVICES CONFIGURATION (OPTIONAL - Profile: development)
# =============================================================================
# Enable/disable development services by setting profile to 'development' or 'disabled'

# Git Repository Hosting (Gitea with Actions)
DEVELOPMENT_GIT_PROFILE=development
GITEA_PORT=7001
GITEA_SSH_PORT=2222
GITEA_MEMORY_LIMIT=2g
GITEA_TRAEFIK_ENABLE=true
GITEA_DOMAIN=gitea.${BASE_DOMAIN}  # Traefik/Cloudflare hostname
GITEA_PROTOCOL=http
GITEA_SECRET_KEY=gitea-secret-key-change-me-2024
GITEA_INTERNAL_TOKEN=gitea-internal-token-change-me-2024
GITEA_JWT_SECRET=gitea-jwt-secret-change-me-2024
GITEA_ACTIONS_ENABLED=true
GITEA_DBNAME=gitea
GITEA_DBUSER=gitea
GITEA_DBPASS=gitea_db_password_2024
REGISTRY_PORT=5001
REGISTRY_DOMAIN=registry.${BASE_DOMAIN}

# =============================================================================
# MONITORING SERVICES CONFIGURATION (OPTIONAL - Profile: monitoring)
# =============================================================================
# Enable/disable monitoring services by setting profile to 'monitoring' or 'disabled'

# Service Monitoring (Uptime Kuma)
MONITORING_UPTIME_PROFILE=monitoring
UPTIME_KUMA_PORT=6001
UPTIME_KUMA_MEMORY_LIMIT=1g
UPTIME_KUMA_TRAEFIK_ENABLE=true
UPTIME_KUMA_DOMAIN=status-${COMPUTER_NAME}.${BASE_DOMAIN}
UPTIME_KUMA_PROTOCOL=http

# =============================================================================
# PROXY SERVICES (OPTIONAL - Profile: proxy)
# =============================================================================
# Only needed when using --profile proxy for external access

# Cloudflare Tunnel Configuration
TUNNEL_NAME=cloudflare-tunnel
TUNNEL_CREDENTIALS_FILE=30b7532b-ad2e-4474-bd2a-ddd07fabac80.json

# Traefik Configuration
TRAEFIK_HTTP_PORT=80
TRAEFIK_HTTPS_PORT=443
TRAEFIK_DASHBOARD_PORT=8083
TRAEFIK_DASHBOARD_ENABLED=true
TRAEFIK_INSECURE=true
TRAEFIK_LOG_LEVEL=INFO
ACME_EMAIL=admin@localhost

# Port 8080 is RESERVED for tunnel/proxy services
# Traefik/Cloudflare routed hostname for Coder
CODER_DOMAIN=coder.${BASE_DOMAIN}
DATA_BASE_DIR=./files

# =============================================================================
# OPTIONAL: Example production-style domain overrides
#
# Uncomment and adapt for a real DNS/Tunnel setup (e.g., Cloudflare -> Traefik)
# These do NOT change defaults above; they serve as a quick-start reference.
#
# BASE_DOMAIN=example.com
# CODER_DOMAIN=coder.${BASE_DOMAIN}
# GITEA_DOMAIN=gitea.${BASE_DOMAIN}
# N8N_DOMAIN=n8n.${BASE_DOMAIN}
# NOCODB_DOMAIN=nocodb.${BASE_DOMAIN}
# PAPERLESS_DOMAIN=paperless.${BASE_DOMAIN}
# ACTIVEPIECES_DOMAIN=activepieces.${BASE_DOMAIN}
# SEARXNG_DOMAIN=search.${BASE_DOMAIN}
# OPENWEBUI_DOMAIN=chat.${BASE_DOMAIN}
# REGISTRY_DOMAIN=registry.${BASE_DOMAIN}
#
# # If routing through HTTPS externally
# PAPERLESS_PROTOCOL=https
# SEARXNG_PROTOCOL=https
# NOCODB_PROTOCOL=https
# GITEA_PROTOCOL=https
#
